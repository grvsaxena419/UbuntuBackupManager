/*
 * Copyright (c) 1998-2011 Erez Zadok
 * Copyright (c) 2009	   Shrikar Archak
 * Copyright (c) 2003-2011 Stony Brook University
 * Copyright (c) 2003-2011 The Research Foundation of SUNY
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#include "wrapfs.h"

/* 
 * This function finds a valid path to rename the deleted file
 * after getting path we just rename the file instead of deleting it
 * - gs
 */
struct dentry *getrename_path(struct inode *dir, struct dentry *dentry, struct inode **destdir,struct path *lwpath,struct dentry *dentry1)
{
	struct dentry *mountedon,*lower_mountedon;
	struct dentry *movepath,*finalpath, *temp_dentry;
	struct dentry *lower_dentry,*mntd_parent;
	
	int buflen = PAGE_SIZE,len;
	char *newname;
	char *buf1,*buf2;
	char *retval,*namm;
	struct path lower_path,lower_parent_path,mountedon_lower_path;
	int err=0,i=1;
	struct nameidata lower_nd;
	
	temp_dentry=dentry;
	while(strcmp((temp_dentry->d_name.name),(temp_dentry->d_parent->d_name.name)))
	{
		printk(KERN_EMERG " iteration  |%d|",i);
		printk(KERN_EMERG " |%s|" ,temp_dentry->d_name.name);
		printk(KERN_EMERG " |%s|" ,temp_dentry->d_parent->d_name.name);
		temp_dentry=temp_dentry->d_parent;
		printk(KERN_EMERG "strcmp val = %d",strcmp((temp_dentry->d_name.name),(temp_dentry->d_parent->d_name.name)));
		
	}
	printk(KERN_EMERG "----------------Data %s %s  %s %s",dentry->d_name.name,dentry->d_parent->d_name.name,dentry->d_parent->d_parent->d_name.name,dentry->d_parent->d_parent->d_parent->d_name.name);
	printk(KERN_EMERG "/ !!!Inode no %s %d %d > Got request to delete  ",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_inode->i_ino);
	printk(KERN_EMERG "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1  ");
	printk(KERN_EMERG "Wrapfs: getrename path > Got request to delete %s ",dentry->d_name.name);
	//	printk(KERN_EMERG "Inode no %d %d > Got request to delete  ",dentry->d_inode,dentry->d_inode->i_ino);

	newname=(char*)kmalloc(buflen, GFP_KERNEL);
	buf1=(char*)kmalloc(buflen, GFP_KERNEL);
	namm=(char*)kmalloc(buflen, GFP_KERNEL);
	
	
	strcpy(namm,SAVEDIR);
	
	retval=dentry_path_raw(dentry,buf1,buflen);
	if(IS_ERR(retval))
	{
		printk(KERN_EMERG "Wrapfs:serched path error");
	}
	printk(KERN_EMERG "Wrapfs:serched path = %s l= %d",retval,strlen(buf1));		
	
	
	mountedon=lwpath->mnt->mnt_mountpoint;
	//printk(KERN_EMERG "Inode no%s %d %d > Got request to delete  ",mountedon->d_name,mountedon->d_inode,mountedon->d_inode->i_ino);
	//printk(KERN_EMERG "Inode no %s %d > Got request to delete  ",dentry->d_parent->d_name,dentry->d_parent->d_inode->i_ino);
	//mountedon=lookup_one_len(mountedon->d_name.name,,len);
	//mountedon=lwpath->mnt->mnt_root;
	//mountedon->d_op=dentry1->d_op;
	
	//printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",mountedon->d_name.name,mountedon->d_inode,mountedon->d_op);
	//wrapfs_get_lower_path(mountedon, &lower_path);
	//lower_mountedon = lower_path.dentry;
	printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",lwpath->mnt->mnt_mountpoint->d_name.name,lwpath->mnt->mnt_mountpoint->d_inode,lwpath->mnt->mnt_mountpoint->d_op);
	//printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",lower_mountedon->d_name.name,lower_mountedon->d_inode,lower_mountedon->d_op);
	mntd_parent=mountedon->d_parent;
	//wrapfs_get_lower_path(mntd_parent , &lower_parent_path);
	//wrapfs_get_lower_path(lower_mountedon, &lower_path);
	//mountedon=lower_parent_path.dentry;
	printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",mountedon->d_name.name,mountedon->d_inode,mountedon->d_op);
	
	retval=dentry_path_raw(mountedon,buf1,buflen);
	if(!IS_ERR(retval))
	{
		printk(KERN_EMERG "Wrapfs:root path = %s",retval);		
	}
	
	if (strcmp(mountedon->d_name.name, "/"))
	{
		printk(KERN_EMERG "name not /");
		memset(newname,0,buflen);
	
		strcpy(newname,mountedon->d_name.name);
	
		len=strlen(newname);
		printk(KERN_EMERG " newname is %s and len is %d",newname,len);
		finalpath=lookup_one_len(newname,temp_dentry,len);
		temp_dentry=finalpath;
	}
	
	memset(newname,0,buflen);
	//strcpy(newname,mountedon->d_name.name);
	strcpy(newname,"sls-data");
	//newname="home";
	//printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",dentry->d_parent->d_parent->d_name.name,dentry->d_parent->d_parent->d_inode,dentry->d_parent->d_parent->d_op);
	len=strlen(newname);
	printk(KERN_EMERG " newname is %s and len is %d",newname,len);
	printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_op);
	finalpath=lookup_one_len(newname,temp_dentry,len);

	if(IS_ERR(finalpath))
	{
		printk(KERN_EMERG "Wrapfs:encountered error while finding directory final path");
		return dentry1;
	}
	printk(KERN_EMERG "-> -> ->Wrapfs: found final path.. ");
	printk(KERN_EMERG "!!!!Wrapfs: found final path..%s %p  %p ",finalpath->d_name.name,finalpath->d_inode,finalpath->d_op);
	
	memset(newname,0,buflen);
	//strcpy(newname,mountedon->d_name.name);
	//memset(newname,0,buflen);
	strncpy(newname,dentry->d_name.name,buflen);
	strcat(newname,".unrm");
	//len=strlen(newname);
	//strcpy(newname,"aa.backup");
	//newname="home";
	//printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",dentry->d_parent->d_parent->d_name.name,dentry->d_parent->d_parent->d_inode,dentry->d_parent->d_parent->d_op);
	len=strlen(newname);
	printk(KERN_EMERG "Before seg fault .................................");
	finalpath=lookup_one_len(newname,finalpath,len);

	if(IS_ERR(finalpath))
	{
		printk(KERN_EMERG "Wrapfs:encountered error while finding directory final path");
		return dentry1;
	}
	printk(KERN_EMERG "-> -> ->Wrapfs: found final path.. ");
	printk(KERN_EMERG "!!!!Wrapfs: found final path..%s %p  %p ",finalpath->d_name.name,finalpath->d_inode,finalpath->d_op);
	/*finalpath=lookup_one_len(newname,mountedon,len);
	finalpath=lookup_one_len(newname,mountedon,len);
	printk(KERN_EMERG "Wrapfs: found final path.. ");*/
	//printk(KERN_EMERG "Wrapfs: found final path..%s %d %p %d ",finalpath->d_name.name,finalpath->d_inode,finalpath->d_op,finalpath->d_inode->i_ino);
//    return dentry1;	
	
	//*destdir=movepath->d_inode;
	//*destdir=mountedon->d_inode;
	return finalpath;
	
	
	//return -EPERM;
	
	//err = vfs_path_lookup(mountedon, lwpath->mnt, namm, 0,&lower_nd);
	
	if(err)
	{
		printk(KERN_EMERG "Wrapfs: path lookup failed  = %s",namm);
		return -EPERM;
	}

	movepath=lookup_one_len(namm,mountedon,strlen(namm));
	printk(KERN_EMERG "Wrapfs: found move path..%s %d %p ",movepath->d_name.name,movepath->d_inode,movepath->d_op);
	//movepath=dentry->d_parent;
	
	wrapfs_get_lower_path(movepath, &lower_path);
	lower_dentry = lower_path.dentry;
	
	if(IS_ERR(movepath))
	{
		printk(KERN_EMERG "Wrapfs:encountered error while finding directory move path");
		return PTR_ERR(movepath);
	}
	retval=dentry_path_raw(lower_dentry,buf1,buflen);
	if(!IS_ERR(retval))
	{
		printk(KERN_EMERG "Wrapfs: movepath = %s",buf1);		
	}
	
	
	printk(KERN_EMERG "Wrapfs:new name = %s movepath=%s len=%d",newname,movepath->d_name.name,len);
	
	finalpath=lookup_one_len(newname,mountedon,len);
	printk(KERN_EMERG "Wrapfs: found final path.. ");
	
	if(IS_ERR(finalpath))
	{
		printk(KERN_EMERG "Wrapfs:encountered error while finding directory final path");
		return PTR_ERR(finalpath);
	}
	//*destdir=movepath->d_inode;
	*destdir=mountedon->d_inode;
	return finalpath;
	
}


static int wrapfs_create(struct inode *dir, struct dentry *dentry,
			 int mode, struct nameidata *nd)
{
	int err = 0;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path, saved_path;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = mnt_want_write(lower_path.mnt);
	if (err)
		goto out_unlock;

	pathcpy(&saved_path, &nd->path);
	pathcpy(&nd->path, &lower_path);
	err = vfs_create(lower_parent_dentry->d_inode, lower_dentry, mode, nd);
	pathcpy(&nd->path, &saved_path);
	if (err)
		goto out;

	err = wrapfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, wrapfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, lower_parent_dentry->d_inode);

out:
	mnt_drop_write(lower_path.mnt);
out_unlock:
	unlock_dir(lower_parent_dentry);
	wrapfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int wrapfs_link(struct dentry *old_dentry, struct inode *dir,
		       struct dentry *new_dentry)
{
	struct dentry *lower_old_dentry;
	struct dentry *lower_new_dentry;
	struct dentry *lower_dir_dentry;
	u64 file_size_save;
	int err;
	struct path lower_old_path, lower_new_path;

	file_size_save = i_size_read(old_dentry->d_inode);
	wrapfs_get_lower_path(old_dentry, &lower_old_path);
	wrapfs_get_lower_path(new_dentry, &lower_new_path);
	lower_old_dentry = lower_old_path.dentry;
	lower_new_dentry = lower_new_path.dentry;
	lower_dir_dentry = lock_parent(lower_new_dentry);

	err = mnt_want_write(lower_new_path.mnt);
	if (err)
		goto out_unlock;

	err = vfs_link(lower_old_dentry, lower_dir_dentry->d_inode,
		       lower_new_dentry);
	if (err || !lower_new_dentry->d_inode)
		goto out;

	err = wrapfs_interpose(new_dentry, dir->i_sb, &lower_new_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, lower_new_dentry->d_inode);
	fsstack_copy_inode_size(dir, lower_new_dentry->d_inode);
	old_dentry->d_inode->i_nlink =
		wrapfs_lower_inode(old_dentry->d_inode)->i_nlink;
	i_size_write(new_dentry->d_inode, file_size_save);
out:
	mnt_drop_write(lower_new_path.mnt);
out_unlock:
	unlock_dir(lower_dir_dentry);
	wrapfs_put_lower_path(old_dentry, &lower_old_path);
	wrapfs_put_lower_path(new_dentry, &lower_new_path);
	return err;
}

static int wrapfs_unlink(struct inode *dir, struct dentry *dentry)
{
	int err;
	struct dentry *lower_dentry,*temp_dentry;
	struct inode *lower_dir_inode = wrapfs_lower_inode(dir),*lower_dest_inode;
	struct dentry *lower_dir_dentry;
	struct dentry *destname,*parent;
	struct inode *destdir;
	struct path lower_path;
	
	printk(KERN_EMERG "Wrapfs:Got request to delete %s",dentry->d_name.name);
	//printk(KERN_EMERG "Wrapfs: mntd on getrename path > %s d_inode=%p operations=%p",mountedon->d_name.name,mountedon->d_inode,mountedon->d_op);
	//if (strcmp(dentry->d_name.name,"gaurav") == 0)
		//	return -EACCES;
   //printk(KERN_EMERG "Inode no %d %d > Got request to delete  ",dentry->d_inode,dentry->d_inode->i_ino);	
	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	printk(KERN_EMERG "Wrapfs:Got request to delete %s",lower_dentry->d_name.name);
	dget(lower_dentry);
	printk(KERN_EMERG "Wrapfs:Got request to delete %s",lower_dentry->d_name.name);
	//temp_dentry=lower_path.mnt->mnt_mountpoint;
	
	
	//printk(KERN_EMERG "Surabhi's experiment to find mount point mntd on getrename path > %s d_inode=%p operations=%p",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_op);
	//temp_dentry=lower_path.dentry;
	
	//printk(KERN_EMERG "lower : Surabhi's experiment to find mount point mntd on getrename path > %s d_inode=%p operations=%p",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_op);
	//temp_dentry=lower_dentry->d_parent;
	//printk(KERN_EMERG "lower parent : Surabhi's experiment to find mount point mntd on getrename path > %s d_inode=%p operations=%p",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_op);
	//temp_dentry=dentry;
	
	//printk(KERN_EMERG "upper : Surabhi's experiment to find mount point mntd on getrename path > %s d_inode=%p operations=%p",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_op);
	
	//temp_dentry=dentry->d_parent;
	//printk(KERN_EMERG "upper parent : Surabhi's experiment to find mount point mntd on getrename path > %s d_inode=%p operations=%p",temp_dentry->d_name.name,temp_dentry->d_inode,temp_dentry->d_op);
	lower_dir_dentry = lock_parent(lower_dentry);
	
	

	err = mnt_want_write(lower_path.mnt);
	if (err)
		goto out_unlock;
		
	// evrythng should be moved to lower fs upto this code so that vfs layer 
	// operations could be called
	destname=getrename_path(lower_dir_inode,lower_dentry,&destdir,&lower_path,dentry);
	if(IS_ERR(destname))
	{
		err=PTR_ERR(destname);
		printk(KERN_EMERG "Wrapfs: Error in destname ");
		//goto out_unlock;
	}
	
	//parent=dget_parent(destname);
	//destdir=parent->d_inode;
	//lower_dest_inode=wrapfs_lower_inode(destdir);
	printk(KERN_EMERG "Wrapfs: Did not come till here");
	destdir=destname->d_parent->d_inode;
	printk(KERN_EMERG "  %p ",destname);
	err=vfs_rename(lower_dir_inode,lower_dentry,destdir,destname);
	printk(KERN_EMERG "Wrapfs: Did not come till here");
	//err = vfs_unlink(lower_dir_inode, lower_dentry);
	
	/*
	 * Note: unlinking on top of NFS can cause silly-renamed files.
	 * Trying to delete such files results in EBUSY from NFS
	 * below.  Silly-renamed files will get deleted by NFS later on, so
	 * we just need to detect them here and treat such EBUSY errors as
	 * if the upper file was successfully deleted.
	 */
	if (err == -EBUSY && lower_dentry->d_flags & DCACHE_NFSFS_RENAMED)
		err = 0;
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, lower_dir_inode);
	fsstack_copy_inode_size(dir, lower_dir_inode);
	dentry->d_inode->i_nlink =
		wrapfs_lower_inode(dentry->d_inode)->i_nlink;
	dentry->d_inode->i_ctime = dir->i_ctime;
	d_drop(dentry); /* this is needed, else LTP fails (VFS won't do it) */
out:
	mnt_drop_write(lower_path.mnt);
out_unlock:
	unlock_dir(lower_dir_dentry);
	dput(lower_dentry);
	wrapfs_put_lower_path(dentry, &lower_path);
	return err; 
}

static int wrapfs_symlink(struct inode *dir, struct dentry *dentry,
			  const char *symname)
{
	int err = 0;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = mnt_want_write(lower_path.mnt);
	if (err)
		goto out_unlock;
	err = vfs_symlink(lower_parent_dentry->d_inode, lower_dentry, symname);
	if (err)
		goto out;
	err = wrapfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, wrapfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, lower_parent_dentry->d_inode);

out:
	mnt_drop_write(lower_path.mnt);
out_unlock:
	unlock_dir(lower_parent_dentry);
	wrapfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int wrapfs_mkdir(struct inode *dir, struct dentry *dentry, int mode)
{
	int err = 0;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = mnt_want_write(lower_path.mnt);
	if (err)
		goto out_unlock;
	err = vfs_mkdir(lower_parent_dentry->d_inode, lower_dentry, mode);
	if (err)
		goto out;

	err = wrapfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;

	fsstack_copy_attr_times(dir, wrapfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, lower_parent_dentry->d_inode);
	/* update number of links on parent directory */
	dir->i_nlink = wrapfs_lower_inode(dir)->i_nlink;

out:
	mnt_drop_write(lower_path.mnt);
out_unlock:
	unlock_dir(lower_parent_dentry);
	wrapfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int wrapfs_rmdir(struct inode *dir, struct dentry *dentry)
{
	struct dentry *lower_dentry;
	struct dentry *lower_dir_dentry;
	int err;
	struct path lower_path;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_dir_dentry = lock_parent(lower_dentry);

	err = mnt_want_write(lower_path.mnt);
	if (err)
		goto out_unlock;
	err = vfs_rmdir(lower_dir_dentry->d_inode, lower_dentry);
	if (err)
		goto out;

	d_drop(dentry);	/* drop our dentry on success (why not VFS's job?) */
	if (dentry->d_inode)
		clear_nlink(dentry->d_inode);
	fsstack_copy_attr_times(dir, lower_dir_dentry->d_inode);
	fsstack_copy_inode_size(dir, lower_dir_dentry->d_inode);
	dir->i_nlink = lower_dir_dentry->d_inode->i_nlink;

out:
	mnt_drop_write(lower_path.mnt);
out_unlock:
	unlock_dir(lower_dir_dentry);
	wrapfs_put_lower_path(dentry, &lower_path);
	return err;
}

static int wrapfs_mknod(struct inode *dir, struct dentry *dentry, int mode,
			dev_t dev)
{
	int err = 0;
	struct dentry *lower_dentry;
	struct dentry *lower_parent_dentry = NULL;
	struct path lower_path;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_parent_dentry = lock_parent(lower_dentry);

	err = mnt_want_write(lower_path.mnt);
	if (err)
		goto out_unlock;
	err = vfs_mknod(lower_parent_dentry->d_inode, lower_dentry, mode, dev);
	if (err)
		goto out;

	err = wrapfs_interpose(dentry, dir->i_sb, &lower_path);
	if (err)
		goto out;
	fsstack_copy_attr_times(dir, wrapfs_lower_inode(dir));
	fsstack_copy_inode_size(dir, lower_parent_dentry->d_inode);

out:
	mnt_drop_write(lower_path.mnt);
out_unlock:
	unlock_dir(lower_parent_dentry);
	wrapfs_put_lower_path(dentry, &lower_path);
	return err;
}

/*
 * The locking rules in wrapfs_rename are complex.  We could use a simpler
 * superblock-level name-space lock for renames and copy-ups.
 */
static int wrapfs_rename(struct inode *old_dir, struct dentry *old_dentry,
			 struct inode *new_dir, struct dentry *new_dentry)
{
	int err = 0;
	struct dentry *lower_old_dentry = NULL;
	struct dentry *lower_new_dentry = NULL;
	struct dentry *lower_old_dir_dentry = NULL;
	struct dentry *lower_new_dir_dentry = NULL;
	struct dentry *trap = NULL;
	struct path lower_old_path, lower_new_path;

	wrapfs_get_lower_path(old_dentry, &lower_old_path);
	wrapfs_get_lower_path(new_dentry, &lower_new_path);
	lower_old_dentry = lower_old_path.dentry;
	lower_new_dentry = lower_new_path.dentry;
	lower_old_dir_dentry = dget_parent(lower_old_dentry);
	lower_new_dir_dentry = dget_parent(lower_new_dentry);

	trap = lock_rename(lower_old_dir_dentry, lower_new_dir_dentry);
	/* source should not be ancestor of target */
	if (trap == lower_old_dentry) {
		err = -EINVAL;
		goto out;
	}
	/* target should not be ancestor of source */
	if (trap == lower_new_dentry) {
		err = -ENOTEMPTY;
		goto out;
	}

	err = mnt_want_write(lower_old_path.mnt);
	if (err)
		goto out;
	err = mnt_want_write(lower_new_path.mnt);
	if (err)
		goto out_drop_old_write;

	err = vfs_rename(lower_old_dir_dentry->d_inode, lower_old_dentry,
			 lower_new_dir_dentry->d_inode, lower_new_dentry);
	if (err)
		goto out_err;

	fsstack_copy_attr_all(new_dir, lower_new_dir_dentry->d_inode);
	fsstack_copy_inode_size(new_dir, lower_new_dir_dentry->d_inode);
	if (new_dir != old_dir) {
		fsstack_copy_attr_all(old_dir,
				      lower_old_dir_dentry->d_inode);
		fsstack_copy_inode_size(old_dir,
					lower_old_dir_dentry->d_inode);
	}

out_err:
	mnt_drop_write(lower_new_path.mnt);
out_drop_old_write:
	mnt_drop_write(lower_old_path.mnt);
out:
	unlock_rename(lower_old_dir_dentry, lower_new_dir_dentry);
	dput(lower_old_dir_dentry);
	dput(lower_new_dir_dentry);
	wrapfs_put_lower_path(old_dentry, &lower_old_path);
	wrapfs_put_lower_path(new_dentry, &lower_new_path);
	return err;
}

static int wrapfs_readlink(struct dentry *dentry, char __user *buf, int bufsiz)
{
	int err;
	struct dentry *lower_dentry;
	struct path lower_path;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	if (!lower_dentry->d_inode->i_op ||
	    !lower_dentry->d_inode->i_op->readlink) {
		err = -EINVAL;
		goto out;
	}

	err = lower_dentry->d_inode->i_op->readlink(lower_dentry,
						    buf, bufsiz);
	if (err < 0)
		goto out;
	fsstack_copy_attr_atime(dentry->d_inode, lower_dentry->d_inode);

out:
	wrapfs_put_lower_path(dentry, &lower_path);
	return err;
}

static void *wrapfs_follow_link(struct dentry *dentry, struct nameidata *nd)
{
	char *buf;
	int len = PAGE_SIZE, err;
	mm_segment_t old_fs;

	/* This is freed by the put_link method assuming a successful call. */
	buf = kmalloc(len, GFP_KERNEL);
	if (!buf) {
		buf = ERR_PTR(-ENOMEM);
		goto out;
	}

	/* read the symlink, and then we will follow it */
	old_fs = get_fs();
	set_fs(KERNEL_DS);
	err = wrapfs_readlink(dentry, buf, len);
	set_fs(old_fs);
	if (err < 0) {
		kfree(buf);
		buf = ERR_PTR(err);
	} else {
		buf[err] = '\0';
	}
out:
	nd_set_link(nd, buf);
	return NULL;
}

/* this @nd *IS* still used */
static void wrapfs_put_link(struct dentry *dentry, struct nameidata *nd,
			    void *cookie)
{
	char *buf = nd_get_link(nd);
	if (!IS_ERR(buf))	/* free the char* */
		kfree(buf);
}

static int wrapfs_permission(struct inode *inode, int mask, unsigned int flags)
{
	struct inode *lower_inode;
	int err;

	if (flags & IPERM_FLAG_RCU)
		return -ECHILD;

	lower_inode = wrapfs_lower_inode(inode);
	err = inode_permission(lower_inode, mask);
	return err;
}

static int wrapfs_setattr(struct dentry *dentry, struct iattr *ia)
{
	int err = 0;
	struct dentry *lower_dentry;
	struct inode *inode;
	struct inode *lower_inode;
	struct path lower_path;
	struct iattr lower_ia;

	inode = dentry->d_inode;

	/*
	 * Check if user has permission to change inode.  We don't check if
	 * this user can change the lower inode: that should happen when
	 * calling notify_change on the lower inode.
	 */
	err = inode_change_ok(inode, ia);
	if (err)
		goto out_err;

	wrapfs_get_lower_path(dentry, &lower_path);
	lower_dentry = lower_path.dentry;
	lower_inode = wrapfs_lower_inode(inode);

	/* prepare our own lower struct iattr (with the lower file) */
	memcpy(&lower_ia, ia, sizeof(lower_ia));
	if (ia->ia_valid & ATTR_FILE)
		lower_ia.ia_file = wrapfs_lower_file(ia->ia_file);

	/*
	 * If shrinking, first truncate upper level to cancel writing dirty
	 * pages beyond the new eof; and also if its' maxbytes is more
	 * limiting (fail with -EFBIG before making any change to the lower
	 * level).  There is no need to vmtruncate the upper level
	 * afterwards in the other cases: we fsstack_copy_inode_size from
	 * the lower level.
	 */
	if (ia->ia_valid & ATTR_SIZE) {
		err = inode_newsize_ok(inode, ia->ia_size);
		if (err)
			goto out;
		truncate_setsize(inode, ia->ia_size);
	}

	/*
	 * mode change is for clearing setuid/setgid bits. Allow lower fs
	 * to interpret this in its own way.
	 */
	if (lower_ia.ia_valid & (ATTR_KILL_SUID | ATTR_KILL_SGID))
		lower_ia.ia_valid &= ~ATTR_MODE;

	/* notify the (possibly copied-up) lower inode */
	/*
	 * Note: we use lower_dentry->d_inode, because lower_inode may be
	 * unlinked (no inode->i_sb and i_ino==0.  This happens if someone
	 * tries to open(), unlink(), then ftruncate() a file.
	 */
	mutex_lock(&lower_dentry->d_inode->i_mutex);
	err = notify_change(lower_dentry, &lower_ia); /* note: lower_ia */
	mutex_unlock(&lower_dentry->d_inode->i_mutex);
	if (err)
		goto out;

	/* get attributes from the lower inode */
	fsstack_copy_attr_all(inode, lower_inode);
	/*
	 * Not running fsstack_copy_inode_size(inode, lower_inode), because
	 * VFS should update our inode size, and notify_change on
	 * lower_inode should update its size.
	 */

out:
	wrapfs_put_lower_path(dentry, &lower_path);
out_err:
	return err;
}

const struct inode_operations wrapfs_symlink_iops = {
	.readlink	= wrapfs_readlink,
	.permission	= wrapfs_permission,
	.follow_link	= wrapfs_follow_link,
	.setattr	= wrapfs_setattr,
	.put_link	= wrapfs_put_link,
};

const struct inode_operations wrapfs_dir_iops = {
	.create		= wrapfs_create,
	.lookup		= wrapfs_lookup,
	.link		= wrapfs_link,
	.unlink		= wrapfs_unlink,
	.symlink	= wrapfs_symlink,
	.mkdir		= wrapfs_mkdir,
	.rmdir		= wrapfs_rmdir,
	.mknod		= wrapfs_mknod,
	.rename		= wrapfs_rename,
	.permission	= wrapfs_permission,
	.setattr	= wrapfs_setattr,
};

const struct inode_operations wrapfs_main_iops = {
	.permission	= wrapfs_permission,
	.setattr	= wrapfs_setattr,
};
